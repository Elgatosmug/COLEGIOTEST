// Script de prueba de validadores (sin dependencias de seguridad cr√≠tica)
import { validators } from './src/lib/validators.js'
import { SECURITY_CONFIG, VALIDATION_CONFIG } from './src/lib/config.js'

console.log('üîí Pruebas de Validadores y Configuraci√≥n\n')

// Pruebas de sanitizaci√≥n
const testInputs = [
  "normal@email.com",
  "test@email.com' OR '1'='1",
  "test@email.com; DROP TABLE Usuario; --",
  "test@email.com/* */",
  "<script>alert('xss')</script>",
  "test@email.com' UNION SELECT * FROM Usuario --",
  "test@email.com' AND 1=1 --",
  "test@email.com' OR 1=1#",
  "test@email.com' OR 1=1/*",
  "test@email.com' OR '1'='1' --",
]

console.log('üìß Pruebas de sanitizaci√≥n de email:')
testInputs.forEach(input => {
  const sanitized = validators.sanitizeEmail(input)
  console.log(`Input: ${input}`)
  console.log(`Sanitized: ${sanitized}`)
  console.log(`Valid: ${validators.isValidEmail(sanitized || '')}`)
  console.log('---')
})

// Pruebas de c√©dula
const testCedulas = [
  "0991435000", // V√°lida
  "0991435000' OR '1'='1", // SQL injection
  "0991435000; DROP TABLE Usuario; --", // SQL injection
  "0991435000/* */", // SQL comment
  "0991435000' UNION SELECT * FROM Usuario --", // SQL injection
]

console.log('\nüÜî Pruebas de sanitizaci√≥n de c√©dula:')
testCedulas.forEach(cedula => {
  const sanitized = validators.sanitizeCedula(cedula)
  console.log(`Input: ${cedula}`)
  console.log(`Sanitized: ${sanitized}`)
  console.log(`Valid: ${validators.isValidCedula(sanitized || '')}`)
  console.log('---')
})

// Pruebas de contrase√±a
const testPasswords = [
  "Password123!", // V√°lida
  "weak", // D√©bil
  "password", // Sin may√∫sculas
  "PASSWORD123!", // Sin min√∫sculas
  "Password!", // Sin n√∫meros
  "Password123", // Sin caracteres especiales
]

console.log('\nüîê Pruebas de validaci√≥n de contrase√±a:')
testPasswords.forEach(password => {
  const validation = validators.isValidPassword(password)
  console.log(`Password: ${password}`)
  console.log(`Valid: ${validation.valid}`)
  if (!validation.valid) {
    console.log(`Error: ${validation.message}`)
  }
  console.log('---')
})

// Pruebas de sanitizaci√≥n general
const testSanitizeInputs = [
  "Texto normal",
  "<script>alert('xss')</script>",
  "Texto con 'comillas' y \"dobles\"",
  "Texto con -- comentarios SQL",
  "Texto con /* comentarios */ SQL",
  "Texto con caracteres <peligrosos>",
]

console.log('\nüßπ Pruebas de sanitizaci√≥n general:')
testSanitizeInputs.forEach(input => {
  const sanitized = validators.sanitizeInput(input)
  console.log(`Input: ${input}`)
  console.log(`Sanitized: ${sanitized}`)
  console.log('---')
})

// Pruebas de validaci√≥n de roles
console.log('\nüë• Pruebas de validaci√≥n de roles:')
const testRoles = ['estudiante', 'representante', 'profesor', 'administrador', 'inv√°lido', 'ESTUDIANTE', 'Profesor']
testRoles.forEach(role => {
  console.log(`Role: ${role}`)
  console.log(`Valid: ${validators.isValidRole(role)}`)
  console.log('---')
})

// Pruebas de validaci√≥n de datos de rol
console.log('\nüìã Pruebas de validaci√≥n de datos de rol:')
const testRoleData = [
  { role: 'estudiante', data: { jornada: 1 } },
  { role: 'estudiante', data: {} },
  { role: 'profesor', data: { especialidad: 'Matem√°ticas' } },
  { role: 'profesor', data: {} },
  { role: 'representante', data: {} },
  { role: 'inv√°lido', data: {} },
]

testRoleData.forEach(({ role, data }) => {
  const validation = validators.validateRoleData(role, data)
  console.log(`Role: ${role}, Data:`, data)
  console.log(`Valid: ${validation.valid}`)
  if (!validation.valid) {
    console.log(`Error: ${validation.message}`)
  }
  console.log('---')
})

// Mostrar configuraci√≥n
console.log('\n‚öôÔ∏è Configuraci√≥n del sistema:')
console.log('SECURITY_CONFIG:', {
  PASSWORD_MIN_LENGTH: SECURITY_CONFIG.PASSWORD_MIN_LENGTH,
  MAX_LOGIN_ATTEMPTS: SECURITY_CONFIG.MAX_LOGIN_ATTEMPTS,
  LOCKOUT_DURATION: SECURITY_CONFIG.LOCKOUT_DURATION,
  SESSION_TIMEOUT: SECURITY_CONFIG.SESSION_TIMEOUT
})

console.log('\nVALIDATION_CONFIG:', {
  EMAIL_REGEX: VALIDATION_CONFIG.EMAIL_REGEX.toString(),
  CEDULA_REGEX: VALIDATION_CONFIG.CEDULA_REGEX.toString(),
  PROVINCE_RANGE: VALIDATION_CONFIG.PROVINCE_RANGE,
  CEDULA_COEFFICIENTS: VALIDATION_CONFIG.CEDULA_COEFFICIENTS
})

console.log('\n‚úÖ Pruebas completadas!')
console.log('üìã Verifica que todos los inputs maliciosos fueron bloqueados.')
console.log('\nüîí Resumen de seguridad:')
console.log('‚úÖ Protecci√≥n contra SQL Injection')
console.log('‚úÖ Protecci√≥n contra XSS')
console.log('‚úÖ Validaci√≥n de email')
console.log('‚úÖ Validaci√≥n de c√©dula ecuatoriana')
console.log('‚úÖ Validaci√≥n de contrase√±as fuertes')
console.log('‚úÖ Sanitizaci√≥n de inputs')
console.log('‚úÖ Validaci√≥n de roles robusta')
console.log('‚úÖ Validaci√≥n de datos espec√≠ficos por rol')
console.log('\nüìÅ Estructura modular:')
console.log('‚úÖ config.js - Configuraci√≥n centralizada (sin secrets)')
console.log('‚úÖ validators.js - Validadores y sanitizaci√≥n')
console.log('‚úÖ securityUtils.js - Utilidades de seguridad del cliente')
console.log('‚úÖ authService.js - Servicio de autenticaci√≥n con Supabase Auth')
console.log('\nüõ°Ô∏è Arquitectura de seguridad mejorada:')
console.log('‚úÖ JWT manejado por Supabase Auth (backend)')
console.log('‚úÖ Sin secrets en el frontend')
console.log('‚úÖ Mensajes de error gen√©ricos')
console.log('‚úÖ Validaciones robustas')
console.log('\nüîê Funcionalidad "Olvid√© mi contrase√±a":')
console.log('‚úÖ Formulario de solicitud integrado')
console.log('‚úÖ P√°gina de restablecimiento')
console.log('‚úÖ Validaciones de contrase√±a')
console.log('‚úÖ Integraci√≥n con Supabase Auth')
console.log('‚úÖ React Router configurado') 